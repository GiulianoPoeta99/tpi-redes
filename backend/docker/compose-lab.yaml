services:
  # Máquina A - Red 172.20.0.0/24
  machine-a:
    image: file-transfer-cli-lab
    container_name: ft-machine-a
    hostname: machine-a
    volumes:
      - ../tests/fixtures:/app/files:ro
      - ./volumes/lab/machine-a:/app/downloads
    networks:
      network-a:
        ipv4_address: 172.20.0.10
    privileged: true
    cap_add:
      - NET_ADMIN
    user: root
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ping", "-c", "1", "172.21.0.10"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    command: >
      sh -c "
        echo '🚀 Configurando Machine A...';
        
        # Wait for router to be ready
        echo '⏳ Esperando router...';
        until ping -c 1 172.20.0.2 >/dev/null 2>&1; do
          echo '  Router no disponible, reintentando...';
          sleep 2;
        done;
        echo '✅ Router disponible';
        
        # Configure routing with retry logic
        echo '🌐 Configurando rutas...';
        for i in {1..5}; do
          if ip route add 172.21.0.0/24 via 172.20.0.2 2>/dev/null; then
            echo '✅ Ruta agregada exitosamente';
            break;
          elif ip route show | grep -q '172.21.0.0/24 via 172.20.0.2'; then
            echo '✅ Ruta ya existe';
            break;
          else
            echo \"⚠️  Intento \$i/5 falló, reintentando...\";
            sleep 2;
          fi;
        done;
        
        # Verify connectivity
        echo '🔍 Verificando conectividad...';
        if ping -c 2 172.21.0.10 >/dev/null 2>&1; then
          echo '✅ Machine A configurada y conectada';
        else
          echo '⚠️  Machine A configurada pero sin conectividad completa';
        fi;
        
        echo '📋 Rutas configuradas:';
        ip route show;
        
        echo '🎯 Machine A lista para transferencias';
        tail -f /dev/null
      "
    environment:
      - MACHINE_NAME=Machine-A
      - RUST_LOG=info
    depends_on:
      router:
        condition: service_healthy

  # Máquina B - Red 172.21.0.0/24  
  machine-b:
    image: file-transfer-cli-lab
    container_name: ft-machine-b
    hostname: machine-b
    volumes:
      - ../tests/fixtures:/app/files:ro
      - ./volumes/lab/machine-b:/app/downloads
    networks:
      network-b:
        ipv4_address: 172.21.0.10
    privileged: true
    cap_add:
      - NET_ADMIN
    user: root
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ping", "-c", "1", "172.20.0.10"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    command: >
      sh -c "
        echo '🚀 Configurando Machine B...';
        
        # Wait for router to be ready
        echo '⏳ Esperando router...';
        until ping -c 1 172.21.0.2 >/dev/null 2>&1; do
          echo '  Router no disponible, reintentando...';
          sleep 2;
        done;
        echo '✅ Router disponible';
        
        # Configure routing with retry logic
        echo '🌐 Configurando rutas...';
        for i in {1..5}; do
          if ip route add 172.20.0.0/24 via 172.21.0.2 2>/dev/null; then
            echo '✅ Ruta agregada exitosamente';
            break;
          elif ip route show | grep -q '172.20.0.0/24 via 172.21.0.2'; then
            echo '✅ Ruta ya existe';
            break;
          else
            echo \"⚠️  Intento \$i/5 falló, reintentando...\";
            sleep 2;
          fi;
        done;
        
        # Verify connectivity
        echo '🔍 Verificando conectividad...';
        if ping -c 2 172.20.0.10 >/dev/null 2>&1; then
          echo '✅ Machine B configurada y conectada';
        else
          echo '⚠️  Machine B configurada pero sin conectividad completa';
        fi;
        
        echo '📋 Rutas configuradas:';
        ip route show;
        
        echo '🎯 Machine B lista para transferencias';
        tail -f /dev/null
      "
    environment:
      - MACHINE_NAME=Machine-B
      - RUST_LOG=info
    depends_on:
      router:
        condition: service_healthy

  # Router/Gateway que conecta ambas redes
  router:
    image: alpine:latest
    container_name: ft-router
    hostname: router
    networks:
      network-a:
        ipv4_address: 172.20.0.2
      network-b:
        ipv4_address: 172.21.0.2
    privileged: true
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "ping -c 1 172.20.0.1 && ping -c 1 172.21.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: >
      sh -c "
        echo '🚀 Configurando router...';
        
        # Install required packages with retry
        echo '📦 Instalando paquetes...';
        for i in {1..3}; do
          if apk add --no-cache iptables iproute2 >/dev/null 2>&1; then
            echo '✅ Paquetes instalados';
            break;
          else
            echo \"⚠️  Intento \$i/3 falló, reintentando...\";
            sleep 2;
          fi;
        done;
        
        # Configure IP forwarding
        echo '🌐 Configurando IP forwarding...';
        echo 1 > /proc/sys/net/ipv4/ip_forward;
        sysctl -w net.ipv4.ip_forward=1;
        
        # Configure iptables for forwarding
        echo '🔥 Configurando iptables...';
        iptables -P FORWARD ACCEPT;
        iptables -A FORWARD -i eth0 -o eth1 -j ACCEPT;
        iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT;
        
        # Verify configuration
        echo '🔍 Verificando configuración...';
        if [ \$(cat /proc/sys/net/ipv4/ip_forward) = '1' ]; then
          echo '✅ IP forwarding habilitado';
        else
          echo '❌ Error: IP forwarding no habilitado';
          exit 1;
        fi;
        
        echo '✅ Router configurado exitosamente';
        echo '📍 Network A: 172.20.0.0/24 (gateway: 172.20.0.2)';
        echo '📍 Network B: 172.21.0.0/24 (gateway: 172.21.0.2)';
        echo '📋 Rutas:';
        ip route show;
        
        echo '🎯 Router listo para enrutar tráfico';
        tail -f /dev/null
      "

networks:
  network-a:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
  
  network-b:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
          gateway: 172.21.0.1

# Los volúmenes se crean automáticamente como bind mounts