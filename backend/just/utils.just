# Create test directories and files with robust validation
create-test-files:
    @echo "Creating test directories and files..."
    
    # Create temporary directories
    mkdir -p tmp/downloads/tcp tmp/downloads/udp
    @echo "  Temporary directories created"
    
    # Ensure test fixtures directory exists
    mkdir -p tests/fixtures
    @echo "  Fixtures directory ready"
    
    # Create essential test files if they don't exist
    just _ensure-test-fixtures
    
    @echo "All test files and directories ready"

# Internal function to ensure test fixtures exist
_ensure-test-fixtures:
    #!/bin/bash
    set -e
    
    FIXTURES_DIR="tests/fixtures"
    
    # Create hello.txt if it doesn't exist
    if [ ! -f "$FIXTURES_DIR/hello.txt" ]; then
        echo "  Creating hello.txt..."
        echo "Hello, World!" > "$FIXTURES_DIR/hello.txt"
        echo "" >> "$FIXTURES_DIR/hello.txt"
        echo "This is a test file for the file transfer laboratory." >> "$FIXTURES_DIR/hello.txt"
        echo "It contains multiple lines to test the transfer functionality." >> "$FIXTURES_DIR/hello.txt"
        echo "" >> "$FIXTURES_DIR/hello.txt"
        echo "Features being tested:" >> "$FIXTURES_DIR/hello.txt"
        echo "- TCP reliable transfer" >> "$FIXTURES_DIR/hello.txt"
        echo "- UDP fire-and-forget transfer" >> "$FIXTURES_DIR/hello.txt"
        echo "- Bidirectional communication" >> "$FIXTURES_DIR/hello.txt"
        echo "- Error handling" >> "$FIXTURES_DIR/hello.txt"
        echo "" >> "$FIXTURES_DIR/hello.txt"
        echo "File size: Small (< 1KB)" >> "$FIXTURES_DIR/hello.txt"
        echo "Protocol: Both TCP and UDP" >> "$FIXTURES_DIR/hello.txt"
        echo "Network: Cross-subnet transfer via router" >> "$FIXTURES_DIR/hello.txt"
        echo "" >> "$FIXTURES_DIR/hello.txt"
        echo "Generated by: File Transfer Lab" >> "$FIXTURES_DIR/hello.txt"
        echo "    hello.txt created"
    fi
    
    # Create config.json if it doesn't exist
    if [ ! -f "$FIXTURES_DIR/config.json" ]; then
        echo "  Creating config.json..."
        echo '{' > "$FIXTURES_DIR/config.json"
        echo '  "lab_config": {' >> "$FIXTURES_DIR/config.json"
        echo '    "name": "File Transfer Laboratory",' >> "$FIXTURES_DIR/config.json"
        echo '    "version": "1.0.0",' >> "$FIXTURES_DIR/config.json"
        echo '    "description": "Configuration file for testing file transfers",' >> "$FIXTURES_DIR/config.json"
        echo '    "networks": {' >> "$FIXTURES_DIR/config.json"
        echo '      "network_a": {' >> "$FIXTURES_DIR/config.json"
        echo '        "subnet": "172.20.0.0/24",' >> "$FIXTURES_DIR/config.json"
        echo '        "gateway": "172.20.0.1",' >> "$FIXTURES_DIR/config.json"
        echo '        "machine": "172.20.0.10"' >> "$FIXTURES_DIR/config.json"
        echo '      },' >> "$FIXTURES_DIR/config.json"
        echo '      "network_b": {' >> "$FIXTURES_DIR/config.json"
        echo '        "subnet": "172.21.0.0/24",' >> "$FIXTURES_DIR/config.json"
        echo '        "gateway": "172.21.0.1",' >> "$FIXTURES_DIR/config.json"
        echo '        "machine": "172.21.0.10"' >> "$FIXTURES_DIR/config.json"
        echo '      }' >> "$FIXTURES_DIR/config.json"
        echo '    },' >> "$FIXTURES_DIR/config.json"
        echo '    "protocols": {' >> "$FIXTURES_DIR/config.json"
        echo '      "tcp": {' >> "$FIXTURES_DIR/config.json"
        echo '        "chunk_size": 8192,' >> "$FIXTURES_DIR/config.json"
        echo '        "reliable": true' >> "$FIXTURES_DIR/config.json"
        echo '      },' >> "$FIXTURES_DIR/config.json"
        echo '      "udp": {' >> "$FIXTURES_DIR/config.json"
        echo '        "chunk_size": 1024,' >> "$FIXTURES_DIR/config.json"
        echo '        "reliable": false' >> "$FIXTURES_DIR/config.json"
        echo '      }' >> "$FIXTURES_DIR/config.json"
        echo '    }' >> "$FIXTURES_DIR/config.json"
        echo '  }' >> "$FIXTURES_DIR/config.json"
        echo '}' >> "$FIXTURES_DIR/config.json"
        echo "    config.json created"
    fi
    
    # Create a larger test file for performance testing
    if [ ! -f "$FIXTURES_DIR/large-test.bin" ]; then
        echo "  Creating large-test.bin (50KB)..."
        dd if=/dev/zero of="$FIXTURES_DIR/large-test.bin" bs=1024 count=50 2>/dev/null
        echo "    large-test.bin created (50KB)"
    fi
    
    # Create a medium test file with meaningful content
    if [ ! -f "$FIXTURES_DIR/medium-test.txt" ]; then
        echo "  Creating medium-test.txt..."
        echo "# Medium Test File for File Transfer Laboratory" > "$FIXTURES_DIR/medium-test.txt"
        echo "" >> "$FIXTURES_DIR/medium-test.txt"
        echo "This file is designed to test medium-sized file transfers." >> "$FIXTURES_DIR/medium-test.txt"
        echo "" >> "$FIXTURES_DIR/medium-test.txt"
        echo "## Test Scenarios" >> "$FIXTURES_DIR/medium-test.txt"
        echo "- TCP reliable transfer with 8KB chunks" >> "$FIXTURES_DIR/medium-test.txt"
        echo "- UDP fire-and-forget with 1KB chunks" >> "$FIXTURES_DIR/medium-test.txt"
        echo "- Cross-network communication via router" >> "$FIXTURES_DIR/medium-test.txt"
        echo "- Bidirectional transfer validation" >> "$FIXTURES_DIR/medium-test.txt"
        echo "" >> "$FIXTURES_DIR/medium-test.txt"
        echo "## Network Topology" >> "$FIXTURES_DIR/medium-test.txt"
        echo "Machine A (172.20.0.10) <-> Router <-> Machine B (172.21.0.10)" >> "$FIXTURES_DIR/medium-test.txt"
        echo "" >> "$FIXTURES_DIR/medium-test.txt"
        echo "## Content Padding" >> "$FIXTURES_DIR/medium-test.txt"
        
        # Add padding to make it medium-sized
        for i in {1..20}; do
            echo "Line $i: Testing file transfer with meaningful content. This line adds size to the test file." >> "$FIXTURES_DIR/medium-test.txt"
        done
        
        echo "    medium-test.txt created"
    fi
    
    echo "  Test files summary:"
    ls -lah "$FIXTURES_DIR" | grep -E '\.(txt|json|bin)$' || echo "    No test files found"

# Clean download directories only
clean-downloads:
    rm -rf tmp/downloads/tcp/* tmp/downloads/udp/*

# Clean all temporary files
clean-temp:
    rm -rf tmp/*

# Clean lab volume files
clean-lab:
    rm -rf docker/volumes/lab/*

# Clean Cargo build artifacts
clean:
    cargo clean

# Clean everything (build + temp + downloads + lab)
clean-all: clean clean-downloads clean-temp clean-lab

# Update version in Cargo.toml for release
prepare-release version:
    @echo "Preparing backend release {{version}}..."
    sed -i 's/version = ".*"/version = "{{version}}"/' Cargo.toml
    @echo "Backend version updated to {{version}}"